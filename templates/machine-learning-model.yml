# Machine Learning Model
# Build and deploy a ML model using Azure ML SDK.
# Add steps that build, test, save build artifacts, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'RMDev (c00d16c7-6c1f-4c03-9be1-6934a4c49682)'

  # Azure resource group name
  resourceGroupName: '{{ resourceGroupName }}'

  # Azure ML workspace name
  workspaceName: '{{ workspaceName }}'

  # Run configuration file name
  runConfig: '{{ runConfig }}'

  # Name of model to register
  modelName: '{{ modelName }}'

  # The cloud path where the experiment run stores the model file
  modelAssetPath: '{{ modelAssetPath }}'

  # Azure ML service name
  serviceName: '{{ serviceName }}'

  # Path to a JSON or YAML file containing inference metadata
  inferenceConfigFile: '{{ inferenceConfigFile }}'

  # Path to a JSON or YAML file containing deployment metadata
  deploymentConfigFile: '{{ deploymentConfigFile }}'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

pool:
  vmImage: $(vmImageName)
  
steps:
- task: AzureCLI@1
  displayName: 'Install Azure CLI ML Extension'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptLocation: inlineScript
    inlineScript: |
     az extension add -n azure-cli-ml

- task: AzureCLI@1
  displayName: Setup
  inputs:
    azureSubscription: $(azureSubscription)
    scriptLocation: inlineScript
    inlineScript: |
     { az ml workspace create -w $(workspaceName) -g $(resourceGroupName) --exist-ok; } &&
     { az configure -d aml_workspace=$(workspaceName) group=$(resourceGroupName); } &&
     { az ml computetarget create amlcompute -n cpu-cluster --max-nodes 1 -s STANDARD_D3_V2 -w $(workspaceName) -g $(resourceGroupName); } &&
     { az ml folder attach -w $(workspaceName); }

- task: AzureCLI@1
  displayName: 'Train Model'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptLocation: inlineScript
    inlineScript: |
     { az ml run submit-script -c $(runConfig) -t runmetadata.json; } &&
     { az ml model register -n $(modelName) --asset-path $(modelAssetPath) -f runmetadata.json -t modelmetadata.json; }

- task: AzureCLI@1
  displayName: 'Deploy Model'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptLocation: inlineScript
    inlineScript: |
     { az ml computetarget create aks -n $(serviceName) -w $(workspaceName) -g $(resourceGroupName); } &&
     { az ml model deploy -n $(serviceName) --overwrite -f modelmetadata.json --ic $(inferenceConfigFile) --dc $(deploymentConfigFile) --ct $(serviceName); }
